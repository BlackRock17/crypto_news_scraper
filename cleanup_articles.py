#!/usr/bin/env python3
"""
Cleanup —Å–∫—Ä–∏–ø—Ç –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏
–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ: python cleanup_articles.py [–æ–ø—Ü–∏–∏]
"""

import argparse
from datetime import datetime, timedelta
from postgres_database import PostgreSQLDatabaseManager


def cleanup_analyzed_articles(days_to_keep=7, dry_run=False):
    """
    –ò–∑—Ç—Ä–∏–≤–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ –ø–æ-—Å—Ç–∞—Ä–∏ –æ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –±—Ä–æ–π –¥–Ω–∏

    Args:
        days_to_keep (int): –ö–æ–ª–∫–æ –¥–Ω–∏ –¥–∞ –ø–∞–∑–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏—Ç–µ —Å—Ç–∞—Ç–∏–∏
        dry_run (bool): –ê–∫–æ –µ True, —Å–∞–º–æ –ø–æ–∫–∞–∑–≤–∞ –∫–∞–∫–≤–æ —â–µ –∏–∑—Ç—Ä–∏–µ –±–µ–∑ –¥–∞ –∏–∑—Ç—Ä–∏–≤–∞
    """
    print("üßπ CLEANUP –ù–ê –ê–ù–ê–õ–ò–ó–ò–†–ê–ù–ò –°–¢–ê–¢–ò–ò")
    print("=" * 50)

    db = PostgreSQLDatabaseManager()

    # –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–∏ cleanup
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–∏ cleanup:")
    stats_before = db.get_database_stats()
    for key, value in stats_before.items():
        print(f"   {key}: {value}")

    try:
        with db.get_connection() as conn:
            with conn.cursor() as cursor:

                # –ù–∞–º–∏—Ä–∞–º–µ —Å—Ç–∞—Ç–∏–∏—Ç–µ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ
                cutoff_date = datetime.now() - timedelta(days=days_to_keep)

                if dry_run:
                    print(f"\nüîç DRY RUN: –°—Ç–∞—Ç–∏–∏ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ (–∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –ø—Ä–µ–¥–∏ {days_to_keep} –¥–Ω–∏):")
                    cursor.execute('''
                        SELECT id, title, scraped_at
                        FROM articles 
                        WHERE is_analyzed = TRUE 
                        AND scraped_at < %s
                        ORDER BY scraped_at DESC
                    ''', (cutoff_date,))

                    articles_to_delete = cursor.fetchall()

                    if articles_to_delete:
                        for i, (article_id, title, scraped_at) in enumerate(articles_to_delete, 1):
                            print(f"   {i}. [{article_id}] {title[:60]}... ({scraped_at})")
                        print(f"\nüìä –û–±—â–æ {len(articles_to_delete)} —Å—Ç–∞—Ç–∏–∏ —â–µ –±—ä–¥–∞—Ç –∏–∑—Ç—Ä–∏—Ç–∏")
                    else:
                        print("   –ù—è–º–∞ —Å—Ç–∞—Ç–∏–∏ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ")

                else:
                    print(f"\nüóëÔ∏è –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ –ø–æ-—Å—Ç–∞—Ä–∏ –æ—Ç {days_to_keep} –¥–Ω–∏...")

                    cursor.execute('''
                        DELETE FROM articles 
                        WHERE is_analyzed = TRUE 
                        AND scraped_at < %s
                    ''', (cutoff_date,))

                    deleted_count = cursor.rowcount
                    conn.commit()

                    print(f"‚úÖ –ò–∑—Ç—Ä–∏—Ç–∏ {deleted_count} –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏")

                    # –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª–µ–¥ cleanup
                    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ª–µ–¥ cleanup:")
                    stats_after = db.get_database_stats()
                    for key, value in stats_after.items():
                        print(f"   {key}: {value}")

                    return deleted_count

    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ cleanup: {e}")
        return 0


def cleanup_all_analyzed_articles(dry_run=False):
    """–ò–∑—Ç—Ä–∏–≤–∞ –í–°–ò–ß–ö–ò –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–∞—Ç–∞—Ç–∞)"""
    print("üßπ CLEANUP –ù–ê –í–°–ò–ß–ö–ò –ê–ù–ê–õ–ò–ó–ò–†–ê–ù–ò –°–¢–ê–¢–ò–ò")
    print("=" * 50)

    db = PostgreSQLDatabaseManager()

    try:
        with db.get_connection() as conn:
            with conn.cursor() as cursor:

                if dry_run:
                    print("üîç DRY RUN: –í—Å–∏—á–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏:")
                    cursor.execute('''
                        SELECT id, title, scraped_at
                        FROM articles 
                        WHERE is_analyzed = TRUE
                        ORDER BY scraped_at DESC
                    ''')

                    articles = cursor.fetchall()

                    if articles:
                        for i, (article_id, title, scraped_at) in enumerate(articles, 1):
                            print(f"   {i}. [{article_id}] {title[:60]}... ({scraped_at})")
                        print(f"\nüìä –û–±—â–æ {len(articles)} —Å—Ç–∞—Ç–∏–∏ —â–µ –±—ä–¥–∞—Ç –∏–∑—Ç—Ä–∏—Ç–∏")
                    else:
                        print("   –ù—è–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ")

                else:
                    cursor.execute('DELETE FROM articles WHERE is_analyzed = TRUE')
                    deleted_count = cursor.rowcount
                    conn.commit()

                    print(f"‚úÖ –ò–∑—Ç—Ä–∏—Ç–∏ {deleted_count} –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏")
                    return deleted_count

    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ cleanup: {e}")
        return 0


def show_cleanup_status():
    """–ü–æ–∫–∞–∑–≤–∞ —Å—Ç–∞—Ç—É—Å –∑–∞ cleanup - –∫–æ–ª–∫–æ —Å—Ç–∞—Ç–∏–∏ –∏–º–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ"""
    print("üìä CLEANUP –°–¢–ê–¢–£–°")
    print("=" * 30)

    db = PostgreSQLDatabaseManager()

    try:
        with db.get_connection() as conn:
            with conn.cursor() as cursor:

                # –û–±—â–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats = db.get_database_stats()
                print("üìà –û–±—â–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
                for key, value in stats.items():
                    print(f"   {key}: {value}")

                # –°—Ç–∞—Ç–∏–∏ –ø–æ –≤—ä–∑—Ä–∞—Å—Ç
                print("\nüìÖ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ –ø–æ –≤—ä–∑—Ä–∞—Å—Ç:")
                for days in [1, 3, 7, 14, 30]:
                    cutoff_date = datetime.now() - timedelta(days=days)
                    cursor.execute('''
                        SELECT COUNT(*) FROM articles 
                        WHERE is_analyzed = TRUE AND scraped_at < %s
                    ''', (cutoff_date,))

                    count = cursor.fetchone()[0]
                    print(f"   –ü–æ-—Å—Ç–∞—Ä–∏ –æ—Ç {days:2d} –¥–Ω–∏: {count} —Å—Ç–∞—Ç–∏–∏")

    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="Cleanup —Å–∫—Ä–∏–ø—Ç –∑–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä–∏:

–û–°–ù–û–í–ù–ò –ö–û–ú–ê–ù–î–ò:
  python cleanup_articles.py status                    # –ü–æ–∫–∞–∑–≤–∞ —Å—Ç–∞—Ç—É—Å
  python cleanup_articles.py cleanup --days 7          # –ò–∑—Ç—Ä–∏–≤–∞ –ø–æ-—Å—Ç–∞—Ä–∏ –æ—Ç 7 –¥–Ω–∏
  python cleanup_articles.py cleanup --days 7 --dry-run # –°–∞–º–æ –ø–æ–∫–∞–∑–≤–∞ –∫–∞–∫–≤–æ —â–µ –∏–∑—Ç—Ä–∏–µ
  python cleanup_articles.py cleanup --all             # –ò–∑—Ç—Ä–∏–≤–∞ –í–°–ò–ß–ö–ò –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏
        """
    )

    subparsers = parser.add_subparsers(dest='command', help='–ö–æ–º–∞–Ω–¥–∏')

    # Status –∫–æ–º–∞–Ω–¥–∞
    status_parser = subparsers.add_parser('status', help='–ü–æ–∫–∞–∑–≤–∞ cleanup —Å—Ç–∞—Ç—É—Å')

    # Cleanup –∫–æ–º–∞–Ω–¥–∞
    cleanup_parser = subparsers.add_parser('cleanup', help='–ò–∑—Ç—Ä–∏–≤–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏')
    cleanup_parser.add_argument('--days', type=int, default=7,
                                help='–î–Ω–∏ –∑–∞ –ø–∞–∑–µ–Ω–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏ (default: 7)')
    cleanup_parser.add_argument('--all', action='store_true',
                                help='–ò–∑—Ç—Ä–∏–≤–∞ –í–°–ò–ß–ö–ò –∞–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—Ç–∞—Ç–∏–∏')
    cleanup_parser.add_argument('--dry-run', action='store_true',
                                help='–°–∞–º–æ –ø–æ–∫–∞–∑–≤–∞ –∫–∞–∫–≤–æ —â–µ –∏–∑—Ç—Ä–∏–µ –±–µ–∑ –¥–∞ –∏–∑—Ç—Ä–∏–≤–∞')

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return

    try:
        if args.command == 'status':
            show_cleanup_status()

        elif args.command == 'cleanup':
            if args.all:
                deleted = cleanup_all_analyzed_articles(dry_run=args.dry_run)
            else:
                deleted = cleanup_analyzed_articles(days_to_keep=args.days, dry_run=args.dry_run)

            if not args.dry_run and deleted > 0:
                print(f"\nüéâ Cleanup –∑–∞–≤—ä—Ä—à–µ–Ω! –ò–∑—Ç—Ä–∏—Ç–∏ {deleted} —Å—Ç–∞—Ç–∏–∏")

        else:
            print(f"‚ùå –ù–µ—Ä–∞–∑–ø–æ–∑–Ω–∞—Ç–∞ –∫–æ–º–∞–Ω–¥–∞: {args.command}")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ–∫—Ä–∞—Ç–µ–Ω–æ")
    except Exception as e:
        print(f"\n‚ùå –ì—Ä–µ—à–∫–∞: {str(e)}")


if __name__ == "__main__":
    main()
